{
	"info": {
		"_postman_id": "e9a67505-147a-4b71-87b0-819895ee500f",
		"name": "PostmanHW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20983807"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200.",
							"",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Проверить, что в body приходит правильный string.",
							"let rightString = pm.response.text()",
							"",
							"pm.test(\"Right string\", function () {",
							"    pm.expect(pm.response.text()).to.include(rightString);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200.",
							"",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"",
							"let jsonData = JSON.parse(responseBody);",
							"",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"pm.test(\"Name\", function () {",
							"    let name = jsonData.name",
							"    pm.expect(name).to.eql('Alexandr');",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)",
							"",
							"pm.test(\"Age\", function () {",
							"    let age = jsonData.age",
							"    pm.expect(age).to.eql('32');",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"",
							"pm.test(\"Salary\", function () {",
							"    let salary = jsonData.salary",
							"    pm.expect(salary).to.eql(3000);",
							"});",
							"",
							"// Спарсить request.",
							"",
							"let reqData = request.data;",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name\", function () {",
							"    let name = jsonData.name",
							"    pm.expect(name).to.eql(reqData.name);",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Age\", function () {",
							"    let age = jsonData.age",
							"    pm.expect(age).to.eql(reqData.age);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"Salary\", function () {",
							"    let salary = String(jsonData.salary)",
							"    pm.expect(salary).to.eql(reqData.salary);",
							"});",
							"",
							"// Вывести в консоль параметр family из response",
							"",
							"console.log(jsonData.family)",
							"",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"pm.test(\"U_salary_1_5_year\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqData.salary * 4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200.",
							"",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"",
							"let jsonData = JSON.parse(responseBody);",
							"",
							"",
							"// Спарсить request.",
							"",
							"let reqData = pm.request.url.query.toObject();",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name\", function () {",
							"    let name = jsonData.name",
							"    pm.expect(name).to.eql(reqData.name);",
							"});",
							"",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Age\", function () {",
							"    let age = jsonData.age",
							"    pm.expect(age).to.eql(reqData.age);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"Salary\", function () {",
							"    let salary = String(jsonData.salary)",
							"    pm.expect(salary).to.eql(reqData.salary);",
							"});",
							"",
							"// Вывести в консоль параметр family из response.",
							"",
							"console.log(jsonData.family)",
							"",
							"// Проверить, что у параметра dog есть параметры name.",
							"",
							"pm.test(\"Dog have name\", function () {",
							"    let dog = jsonData.family.pets.dog;",
							"    pm.expect(dog).have.property('name')",
							"});",
							"",
							"",
							"// Проверить, что у параметра dog есть параметры age.",
							"",
							"pm.test(\"Dog have age\", function () {",
							"    let dog = jsonData.family.pets.dog;",
							"    pm.expect(dog).have.property('age');",
							"});",
							"",
							"// Проверить, что параметр name имеет значение Luky.",
							"",
							"pm.test(\"Name is Luky\", function () {",
							"    let name = jsonData.family.pets.dog.name;",
							"    pm.expect(name).to.include('Luky');",
							"});",
							"",
							"// Проверить, что параметр age имеет значение 4.",
							"",
							"pm.test(\"Age is 4\", function () {",
							"    let age = String(jsonData.family.pets.dog.age);",
							"    pm.expect(age).to.include(String('4'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200.",
							"",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"",
							"let jsonData = JSON.parse(responseBody);",
							"",
							"",
							"// Спарсить request.",
							"",
							"let reqData = pm.request.url.query.toObject();",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name\", function () {",
							"    let name = jsonData.name",
							"    pm.expect(name).to.eql(reqData.name);",
							"});",
							"",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test(\"Age\", function () {",
							"    let age = String(jsonData.age)",
							"    pm.expect(age).to.eql(reqData.age);",
							"});",
							"",
							"// Вывести в консоль параметр salary из request.",
							"",
							"console.log(reqData.salary)",
							"",
							"// Вывести в консоль параметр salary из response.",
							"",
							"console.log(jsonData.salary)",
							"",
							"// Вывести в консоль 0-й элемент параметра salary из response.",
							"",
							"console.log(jsonData.salary[0])",
							"",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(jsonData.salary[1])",
							"",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(jsonData.salary[2])",
							"",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary_0 = Salary\", function () {",
							"    let salary_0 = Number(jsonData.salary[0])",
							"    pm.expect(salary_0).to.eql(Number(reqData.salary));",
							"});",
							"",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary_1 = Salary * 2\", function () {",
							"    let salary_1 = Number(jsonData.salary[1])",
							"    pm.expect(salary_1).to.eql(reqData.salary * 2);",
							"});",
							"",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary_2 = Salary * 3\", function () {",
							"    let salary_2 = Number(jsonData.salary[2])",
							"    pm.expect(salary_2).to.eql(reqData.salary * 3);",
							"});",
							"",
							"// Создать в окружении переменную name",
							"",
							"pm.environment.set(\"name\");",
							"",
							"// Создать в окружении переменную age",
							"",
							"pm.environment.set(\"age\");",
							"",
							"// Создать в окружении переменную salary",
							"",
							"pm.environment.set(\"salary\");",
							"",
							"// Передать в окружение переменную name",
							"",
							"pm.environment.set(\"name\", \"Alexandr\");",
							"",
							"// Передать в окружение переменную age",
							"",
							"pm.environment.set(\"age\", \"32\");",
							"",
							"// Передать в окружение переменную salary",
							"",
							"pm.environment.set(\"salary\", \"3000\");",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"let i = jsonData.salary;",
							"",
							"while ( i < 2) { ",
							"  console.log( i );",
							"  i++;",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request",
							"",
							"pm.environment.get(\"salary\");",
							"",
							"// Вставить параметр age из окружения в request",
							"",
							"pm.environment.get(\"age\");",
							"",
							"// Вставить параметр name из окружения в request",
							"",
							"pm.environment.get(\"name\");",
							"",
							"// Отправить запрос.",
							"",
							"pm.sendRequest(\"http://162.55.220.72:5005/user_info_2\", function () {",
							"    console.log('Hello!');",
							"});",
							"",
							"// Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"",
							"let jsonData = JSON.parse(responseBody);",
							"",
							"// Спарсить request.",
							"",
							"let reqData = request.data;",
							"",
							"// Проверить, что json response имеет параметр start_qa_salary",
							"",
							"pm.test(\"Response have Start_qa_salary\", function () {",
							"    pm.expect(jsonData).have.property('start_qa_salary')",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months",
							"",
							"pm.test(\"Response have QA_salary_after_6_months\", function () {",
							"    pm.expect(jsonData).have.property('qa_salary_after_6_months')",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months",
							"",
							"pm.test(\"Response have QA_salary_after_12_months\", function () {",
							"    pm.expect(jsonData).have.property('qa_salary_after_12_months')",
							"});",
							"",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"",
							"pm.test(\"Response have QA_salary_after_1.5_year\", function () {",
							"    pm.expect(jsonData).have.property('qa_salary_after_1.5_year')",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"",
							"pm.test(\"Response have QA_salary_after_3.5_years\", function () {",
							"    pm.expect(jsonData).have.property('qa_salary_after_3.5_years')",
							"});",
							"",
							"// Проверить, что json response имеет параметр person",
							"",
							"pm.test(\"Response have person\", function () {",
							"    pm.expect(jsonData).have.property('person')",
							"});",
							"",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Start_qa_salary\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(Number(reqData.salary));",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary_after_6_months\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqData.salary * 2);",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary_after_12_months\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqData.salary * 2.7);",
							"});",
							"",
							"",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary_after_1.5_year\", function () {",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(reqData.salary * 3.3);",
							"});",
							"",
							"",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary_after_3.5_years\", function () {",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(reqData.salary * 3.8);",
							"});",
							"",
							"",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Person = Salary\", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(reqData.salary));",
							"});",
							"",
							"",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"",
							"pm.test(\"U_Age = Age\", function () {",
							"    pm.expect(jsonData.person.u_age).to.eql(Number(reqData.age));",
							"});",
							"",
							"",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary_5_years\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(reqData.salary * 4.2)",
							"});",
							"",
							"",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"let person = jsonData.person",
							"for (i in person){",
							"    console.log(person[i]);",
							"}",
							"",
							"// ВАРИАНТ НА ПРОВЕРКУ ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"let person1 = jsonData.person",
							"function personConsole(person1, i = 0) {",
							"  if (i < person1.length) {",
							"    console.log(person1[i]);",
							"  }",
							"}",
							"personConsole([person1])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}